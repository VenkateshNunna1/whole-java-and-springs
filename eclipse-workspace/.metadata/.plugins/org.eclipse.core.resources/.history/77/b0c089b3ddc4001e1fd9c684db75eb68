package com.spring.springbootdemo.controllers;

import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spring.springbootdemo.entities.Student;
import com.spring.springbootdemo.entities.User;
import com.spring.springbootdemo.helper.ResponseStructure;
import com.spring.springbootdemo.repositories.UserRepository;

@RestController
public class UserController {
	@Autowired
	UserRepository ur;
    @PostMapping("/datasave23")
	public ResponseStructure<User> saveData(@RequestBody User user){
		ur.save(user);
		ResponseStructure<User> rs = new ResponseStructure<User>();
		rs.setStatusCode(HttpStatus.CREATED.value());
		rs.setData(user);
		rs.setMessage("data saved successfully");
		return rs;
	}
    
    @GetMapping("/getdata12")
    public ResponseStructure<User> getData(@RequestParam("id") int id){
    	try {
    	Optional<User> optional =ur.findById(id);
    	 User u=optional.get();
    	ResponseStructure<User> rs = new  ResponseStructure<User>();
    	rs.setStatusCode(HttpStatus.FOUND.value());
    	rs.setData(u);
    	rs.setMessage("data fetched successfully");
    	return rs;
    	}
    	catch(NoSuchElementException n) {
    		ResponseStructure<User> rs = new ResponseStructure<User>();
    		rs.setStatusCode(HttpStatus.NOT_FOUND.value());
    		rs.setData(null);
    		rs.setMessage("data not found");
    		return rs;
    	}
    }
    @PutMapping("/updatedata231")
    public ResponseStructure<User> updateData(@RequestBody User user){
    	ur.save(user);
    	try {
  		  ResponseStructure<User> rs = new ResponseStructure<User>();
  		  rs.setStatusCode(HttpStatus.ACCEPTED.value());
  		  rs.setData(user);
  		  rs.setMessage("data updated successfully");
  		  return rs;
  		  }
  		  catch(Exception e) {
  			  ResponseStructure<User> rs = new ResponseStructure<User>();
  			  rs.setStatusCode(HttpStatus.NOT_ACCEPTABLE.value());
  			  rs.setData(null);
  			  rs.setMessage("data not updated");
  			  return rs;
   
  		  }

    }
    
    @DeleteMapping("/deletedata345")
    public ResponseStructure<User> deleteStudent(@RequestParam("id") int id){
	     Optional<User> optional =   ur.findById(id);
	     User user =optional.get();
	     ur.deleteById(id);
	     
	     ResponseStructure<User> rs = new ResponseStructure<User>();
	     rs.setStatusCode(HttpStatus.OK.value());
	     rs.setData(user);
	     rs.setMessage("data deleted successfully");
	     return rs;
 }

}